<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dimple.blog.front.service.mapper.BlogArticleMapper">

    <resultMap type="com.dimple.blog.front.service.entity.BlogArticle" id="BlogArticleResult">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="headerImage" column="header_image"/>
        <result property="content" column="content"/>
        <result property="categoryId" column="category_id"/>
        <result property="original" column="original"/>
        <result property="summary" column="summary"/>
        <result property="categoryTitle" column="category_title"/>
        <result property="likeCount" column="like_count"/>
        <result property="articleStatus" column="article_status"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="selectBlogArticleBaseVO">
        select distinct id,
                        title,
                        header_image,
                        category_id,
                        original,
                        like_count,
                        summary,
                        article_status,
                        create_by,
                        create_time,
                        update_by,
                        update_time
        from blog_article
    </sql>

    <sql id="selectBlogArticleDetailVo">
        select id,
               title,
               header_image,
               category_id,
               category_title,
               original,
               content,
               summary,
               like_count,
               article_status,
               create_by,
               create_time,
               update_by,
               update_time
        from blog_article
    </sql>
    <update id="likeArticle">
        update blog_article
        set like_count=like_count + 1
        where id = #{id}
    </update>

    <select id="selectBlogArticleList" parameterType="BlogArticle" resultMap="BlogArticleResult">
        select ba.id,
        ba.title,
        ba.header_image,
        ba.category_id,
        bc.title as category_title,
        ba.original,
        ba.content,
        ba.summary,
        ba.like_count,
        ba.article_status,
        ba.create_by,
        ba.create_time,
        ba.update_by,
        ba.update_time
        from blog_article ba
        left join blog_category bc on ba.category_id = bc.id
        <where>
            and ba.id>0
            <if test="title != null  and title != ''">and ba.title like concat('%', #{title}, '%')</if>
            <if test="headerImage != null  and headerImage != ''">and ba.header_image = #{headerImage}</if>
            <if test="content != null  and content != ''">and ba.content = #{content}</if>
            <if test="categoryId != null ">and ba.category_id = #{categoryId}</if>
            <if test="original != null ">and ba.original = #{original}</if>
            <if test="summary != null  and summary != ''">and ba.summary like concat('%', #{summary}, '%')</if>
            <if test="articleStatus != null ">and ba.article_status = #{articleStatus}</if>
            <if test="searchValue != null ">and ((ba.summary like concat('%', #{searchValue}, '%')) or (ba.title like
                concat('%', #{searchValue}, '%')))
            </if>
        </where>
    </select>

    <select id="selectBlogArticleById" parameterType="Long" resultMap="BlogArticleResult">
        <include refid="selectBlogArticleBaseVO"/>
        where id = #{id}
    </select>
    <select id="selectBlogArticleDetailById" resultMap="BlogArticleResult"
            parameterType="java.lang.Long">
        select ba.id,
               ba.title,
               ba.header_image,
               ba.category_id,
               bc.title as category_title,
               ba.original,
               ba.content,
               ba.summary,
               ba.like_count,
               ba.article_status,
               ba.create_by,
               ba.create_time,
               ba.update_by,
               ba.update_time
        from blog_article ba
                 left join blog_category bc on ba.category_id = bc.id
        where ba.id = #{id}
    </select>
    <select id="selectBlogArticleByIds" resultMap="BlogArticleResult">
        <include refid="selectBlogArticleBaseVO"/>
        where id in
        <foreach item="id" collection="collection" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="selectBlogArticleCountByCategoryIds" resultType="com.dimple.blog.front.service.entity.KeyValue">
        select category_id as `key`, count(*) as `value` from blog_article
        where category_id in
        <foreach item="id" collection="collection" open="(" separator="," close=")">
            #{id}
        </foreach>
        group by category_id
    </select>
    <select id="selectBlogArticlePrevNext" resultMap="BlogArticleResult"
            parameterType="java.lang.Long">
        select id, title, header_image
        from blog_article
        where id in ((select max(id)
                      from blog_article
                      where id &lt; #{id})
                     union all
                     (select min(id)
                      from blog_article
                      where id &gt; #{id}))
    </select>
    <select id="selectBlogArticleByTagId" resultMap="BlogArticleResult">
        <include refid="selectBlogArticleBaseVO"/>
        where article_status=1 and id in (select article_id from blog_article_tag where tag_id=#{tagId})
    </select>
    <select id="getPvByArticleId" resultType="com.dimple.blog.front.service.entity.KeyValue">
        select page_id as `key`, count(*) as `value`
        from blog_visit_log
        where page_id is not null
          and page_id > 0
        group by page_id
    </select>
</mapper>